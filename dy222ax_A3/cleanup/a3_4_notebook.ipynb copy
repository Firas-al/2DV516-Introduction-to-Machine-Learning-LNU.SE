{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import a3_4\n",
    "from sklearn.neural_network import MLPClassifier\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, y_train, X_test, y_test = a3_4.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Randomize train\n",
    "seed = 42\n",
    "np.random.seed(seed)\n",
    "r = np.random.permutation(len(X_train))\n",
    "X_train, y_train = X_train[r, :], y_train[r]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize\n",
    "X_train = X_train/255.0\n",
    "X_test = X_test/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(X_train.shape)\n",
    "print(X_train[0].reshape(-1,1).shape)\n",
    "print(X_train[0].shape)\n",
    "print(X_train[0].reshape(28,28).shape)\n",
    "print(X_train[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 784)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(0,16):\n",
    "    plt.figure()\n",
    "    plt.imshow(X_train[i].reshape(28,28))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A3, Ex4.1\n",
      "randomize_data\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Ex 1\n",
    "a3_4.ex_4_1(X_train, y_train, X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 784) (60000,)\n"
     ]
    }
   ],
   "source": [
    "# Ex 2\n",
    "num_reduced = 60000\n",
    "X_train_reduced = X_train[:num_reduced,:]\n",
    "y_train_reduced = y_train[:num_reduced]\n",
    "print(X_train_reduced.shape, y_train_reduced.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = MLPClassifier(early_stopping=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf.fit(X_train_reduced,y_train_reduced)\n",
    "# 2000, .7661\n",
    "# 8000, .8143\n",
    "# 12000, .8404\n",
    "# 20000, .8428\n",
    "# 40000, .848\n",
    "# 60000, .848\n",
    "print(clf.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8825"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = MLPClassifier(early_stopping=True, hidden_layer_sizes=(1000,) )\n",
    "clf.fit(X_train_reduced,y_train_reduced)\n",
    "clf.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8852"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = MLPClassifier(early_stopping=True, hidden_layer_sizes=(350,50,) )\n",
    "clf.fit(X_train_reduced,y_train_reduced)\n",
    "clf.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[880   0  12  18   1   1  81   0   7   0]\n",
      " [  1 985   0  10   0   0   2   0   2   0]\n",
      " [ 12   1 835  18  67   0  64   0   3   0]\n",
      " [ 20  10   5 936   8   1  19   0   1   0]\n",
      " [  2   2  71  55 810   0  58   0   2   0]\n",
      " [  0   0   0   1   0 944   1  34   2  18]\n",
      " [121   2  65  34  39   0 734   0   5   0]\n",
      " [  0   0   0   0   0   7   0 950   0  43]\n",
      " [  4   0   3   3   2   1   3   1 983   0]\n",
      " [  0   0   0   0   0   5   0  25   1 969]]\n"
     ]
    }
   ],
   "source": [
    "# Ex 3\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "predictions = clf.predict(X_test)\n",
    "class_names = [0,1,2,3,4,5,6,7,8,9]\n",
    "print(confusion_matrix(y_test,predictions,class_names))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import assignment_3_funcs as as3f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(10,), (100,), (1000,)], 'early_stopping': [False]}]\n",
      "0.7945,{'early_stopping': False, 'hidden_layer_sizes': (1000,)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(10,),(100,),(1000,)], 'early_stopping':[False]}]\n",
    "gscv = as3f.grid_search_SVC(X_train_reduced,y_train_reduced, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(10, 10), (100, 10), (1000, 10)], 'early_stopping': [False]}]\n",
      "0.256,{'early_stopping': False, 'hidden_layer_sizes': (10, 10)}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/sklearn/neural_network/_multilayer_perceptron.py:571: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(10,10),(100,10),(1000,10)], 'early_stopping':[False]}]\n",
    "gscv = as3f.grid_search_SVC(X_train_reduced,y_train_reduced, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(10, 100), (100, 10), (1000, 10)], 'early_stopping': [False]}]\n",
      "0.5015,{'early_stopping': False, 'hidden_layer_sizes': (10, 100)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(10,100),(100,10),(1000,10)], 'early_stopping':[False]}]\n",
    "gscv = as3f.grid_search_SVC(X_train_reduced,y_train_reduced, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(10,), (100,), (1000,)], 'early_stopping': [True], 'activation': ['tanh', 'relu', 'logistic']}]\n",
      "0.8341,{'activation': 'relu', 'early_stopping': True, 'hidden_layer_sizes': (1000,)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(10,),(100,),(1000,)],\n",
    "              'early_stopping':[True],\n",
    "              'activation':['tanh','relu','logistic']\n",
    "             }]\n",
    "gscv = as3f.grid_search_SVC(X_train_reduced,y_train_reduced, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(1000,), (10, 100), (100, 100), (1000, 100)], 'early_stopping': [True], 'activation': ['tanh', 'relu', 'logistic']}]\n",
      "0.835,{'activation': 'relu', 'early_stopping': True, 'hidden_layer_sizes': (1000,)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(1000,),(10,100,),(100,100,),(1000,100,),],\n",
    "              'early_stopping':[True],\n",
    "              'activation':['tanh','relu','logistic']\n",
    "             }]\n",
    "gscv = as3f.grid_search_SVC(X_train_reduced,y_train_reduced, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8253"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = gscv.best_estimator_\n",
    "clf.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(1000,), (350, 50)], 'early_stopping': [True], 'activation': ['relu']}]\n",
      "0.8986166666666666,{'activation': 'relu', 'early_stopping': True, 'hidden_layer_sizes': (1000,)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(1000,),(350,50)],\n",
    "              'early_stopping':[True],\n",
    "              'activation':['relu']\n",
    "             }]\n",
    "gscv = as3f.grid_search_SVC(X_train,y_train, MLPClassifier, 5, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grid_search_SVC [{'hidden_layer_sizes': [(1000,)], 'early_stopping': [True], 'activation': ['relu'], 'alpha': [0.1, 10, 0.001]}]\n",
      "0.8924499999999999,{'activation': 'relu', 'alpha': 0.001, 'early_stopping': True, 'hidden_layer_sizes': (1000,)}\n"
     ]
    }
   ],
   "source": [
    "svc_param = [{'hidden_layer_sizes':[(1000,)],\n",
    "              'early_stopping':[True],\n",
    "              'activation':['relu'],\n",
    "              'alpha':[.1,10,.001]\n",
    "             }]\n",
    "gscv = as3f.grid_search_SVC(X_train,y_train, MLPClassifier, 3, svc_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9038"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = gscv.best_estimator_\n",
    "clf.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9015\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'confusion_matrix' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-3a96f689155a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'confusion_matrix' is not defined"
     ]
    }
   ],
   "source": [
    "clf = MLPClassifier(early_stopping=True,hidden_layer_sizes=(1000,),alpha=.001)\n",
    "clf.fit(X_train,y_train)\n",
    "print(clf.score(X_test,y_test))\n",
    "predictions = clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[908   1   7  11   2   0  67   0   4   0]\n",
      " [  1 988   0   9   0   1   1   0   0   0]\n",
      " [ 27   1 768  13 127   1  61   0   2   0]\n",
      " [ 22  14   4 917  28   1  12   0   2   0]\n",
      " [  3   1  31  17 914   0  31   0   3   0]\n",
      " [  0   0   1   1   0 952   0  28   3  15]\n",
      " [158   4  47  19  86   0 679   0   7   0]\n",
      " [  0   0   0   0   0   8   0 944   0  48]\n",
      " [  3   0   7   3   1   0   6   2 977   1]\n",
      " [  1   0   0   0   0   3   0  28   0 968]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "print(confusion_matrix(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score \n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9015\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "         0.0       0.81      0.91      0.86      1000\n",
      "         1.0       0.98      0.99      0.98      1000\n",
      "         2.0       0.89      0.77      0.82      1000\n",
      "         3.0       0.93      0.92      0.92      1000\n",
      "         4.0       0.79      0.91      0.85      1000\n",
      "         5.0       0.99      0.95      0.97      1000\n",
      "         6.0       0.79      0.68      0.73      1000\n",
      "         7.0       0.94      0.94      0.94      1000\n",
      "         8.0       0.98      0.98      0.98      1000\n",
      "         9.0       0.94      0.97      0.95      1000\n",
      "\n",
      "    accuracy                           0.90     10000\n",
      "   macro avg       0.90      0.90      0.90     10000\n",
      "weighted avg       0.90      0.90      0.90     10000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print (accuracy_score(y_test,predictions))\n",
    "print(classification_report(y_test,predictions)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.]), array([1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]))\n"
     ]
    }
   ],
   "source": [
    "print(np.unique(y_test,return_counts=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.5191204928346361, 0.3898792769528779, 0.3404346002858327, 0.3201256259588485, 0.3006740463978604, 0.2821512304688442, 0.2720769129475797, 0.2579171323075201, 0.24822850205525052, 0.2378109719712684, 0.22756312948010413, 0.2213202820243613, 0.2132561561504392, 0.20599499783002628, 0.1979883543302466, 0.19725414539082395, 0.18857057265239593, 0.18248936476712047, 0.17599993042011927, 0.1738889395499137, 0.16592674934746485, 0.1608950706075451, 0.15973305200486357, 0.15100563107697473, 0.1507472885192991, 0.14389287736528814, 0.14220166053550834, 0.14033414503290037, 0.13764339250153268]\n"
     ]
    }
   ],
   "source": [
    "print(clf.loss_curve_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.ylabel('cost')\n",
    "plt.xlabel('iterations')\n",
    "plt.plot(clf.loss_curve_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "environment": {
   "name": "common-cpu.m47",
   "type": "gcloud",
   "uri": "gcr.io/deeplearning-platform-release/base-cpu:m47"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
